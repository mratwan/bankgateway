<?php

namespace MrAtwan\BankGateway\Sadad;

use SoapClient;
use MrAtwan\BankGateway\PortAbstract;
use MrAtwan\BankGateway\PortInterface;

class Sadad extends PortAbstract implements PortInterface
{
    /**
     * Url of sadad gateway web service
     *
     * @var string
     */
    protected $serverUrl = 'https://sadad.shaparak.ir/services/MerchantUtility.asmx?wsdl';

    /**
     * Form generated by sadad gateway
     *
     * @var string
     */
    private $form = '';

    function encrypt_pkcs7($str, $key)
    {
        $key = base64_decode($key);
        $ciphertext = OpenSSL_encrypt($str, "DES-EDE3", $key, OPENSSL_RAW_DATA);
        return base64_encode($ciphertext);
    }

    //Send Data
    function CallAPI($url, $data = false)
    {
        $curl = curl_init($url);
        curl_setopt($curl, CURLOPT_CUSTOMREQUEST, "POST");
        curl_setopt($curl, CURLOPT_POSTFIELDS, $data);
        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($curl, CURLOPT_HTTPHEADER, array('Content-Type: application/json', 'Content-Length: ' . strlen($data)));
        $result = curl_exec($curl);
        curl_close($curl);
        return $result;
    }

    /**
     * {@inheritdoc}
     */
    public function set($amount)
    {
        $this->amount = intval($amount);

        return $this;
    }

    /**
     * {@inheritdoc}
     */
    public function ready()
    {
        $this->sendPayRequest();

        return $this;
    }

    /**
     * {@inheritdoc}
     */
    public function redirect()
    {
        $form = $this->form;

        return \View::make('gateway::sadad-redirector')->with(compact('form'));
    }

    /**
     * {@inheritdoc}
     */
    public function verify($transaction)
    {
        parent::verify($transaction);

        $this->verifyPayment();

        return $this;
    }

    /**
     * Sets callback url
     * @param $url
     */
    function setCallback($url)
    {
        $this->callbackUrl = $url;
        return $this;
    }

    /**
     * Gets callback url
     * @return string
     */
    function getCallback()
    {
        if (!$this->callbackUrl)
            $this->callbackUrl = $this->config->get('gateway.sadad.callback-url');

        return $this->makeCallback($this->callbackUrl, ['transaction_id' => $this->transactionId()]);
    }

    /**
     * Send pay request to server
     *
     * @return void
     *
     * @throws SadadException
     */
    protected function sendPayRequest()
    {
        $this->newTransaction();

        $this->form = '';

        try {

            $key = $this->config->get('gateway.sadad.transactionKey');
            $MerchantId = $this->config->get('gateway.sadad.merchant');
            $TerminalId = $this->config->get('gateway.sadad.terminalId');
            $Amount = $this->amount; //Rials
            $OrderId = $this->transactionId();
            $LocalDateTime = date("m/d/Y g:i:s a");
            $ReturnUrl = $this->getCallback();
            $SignData = $this->encrypt_pkcs7("$TerminalId;$OrderId;$Amount","$key");
            $data = array(
                'TerminalId'        => $TerminalId,
                'MerchantId'        => $MerchantId,
                'Amount'            => $Amount,
                'SignData'          => $SignData,
                'ReturnUrl'         => $ReturnUrl,
                'LocalDateTime'     => $LocalDateTime,
                'OrderId'           => $OrderId
            );

            $str_data = json_encode($data);
            $response = $this->CallAPI('https://sadad.shaparak.ir/vpg/api/v0/Request/PaymentRequest',$str_data);

        } catch (\SoapFault $e) {
            $this->transactionFailed();
            $this->newLog('SoapFault', $e->getMessage());
            throw $e;
        }

        $response = json_decode($response);
        if($response->ResCode == 0)
        {
            $this->refId = $response->Token;
            $this->transactionSetRefId();

            $token = $response->Token;
            $url = "https://sadad.shaparak.ir/VPG/Purchase?Token=$token";
            header("Location:$url");
        }
        else {
            die($response->Description);
        }


    }

    /**
     * Verify user payment from bank server
     *
     * @throws SadadException
     */
    protected function verifyPayment()
    {
        try {

            $key = $this->config->get('gateway.sadad.transactionKey');
            $OrderId = $_POST["OrderId"];
            $Token = $_POST["token"];
            $ResCode = $_POST["ResCode"];

            if($ResCode == 0)
            {
                $verifyData = array('Token'=>$Token,'SignData'=>$this->encrypt_pkcs7($Token,$key));
                $str_data = json_encode($verifyData);
                $response = $this->CallAPI('https://sadad.shaparak.ir/vpg/api/v0/Advice/Verify',$str_data);
                $response = json_decode($response);
            }

        } catch (\Exception $e) {
            $this->transactionFailed();
            $this->newLog('SoapFault', $e->getMessage());
            throw $e;
        }

        if (empty($response) || !isset($response->ResCode))
            throw new SadadException('در دریافت اطلاعات از بانک خطایی رخ داده است.');

        $statusResult = strval($response->ResCode);
        $appStatus = $response->Description;

        $message = $this->getMessage($statusResult, $appStatus);

        $this->newLog($statusResult, $message['fa']);

        if ($statusResult != 0) {
            $this->transactionFailed();
            throw new SadadException($message['fa'], $statusResult);
        }
        $this->trackingCode = $response->SystemTraceNo;

//        $this->trackinRef = $response->RetrivalRefNo;
//        $this->cardNumber = $response->CustomerCardNumber;
        $this->transactionSucceed();
    }

    /**
     * Register error to error list
     *
     * @param int $code
     * @param string $message
     *
     * @return array|null
     *
     * @throws SadadException
     */
    private function getMessage($code, $message)
    {
        $result = SadadResult::codeResponse($code, $message);
        if ($result) {
            return $result;
        }
        $result = array(
            'code' => SadadResult::UNKNOWN_CODE,
            'message' => SadadResult::UNKNOWN_MESSAGE,
            'fa' => 'خطای ناشناخته',
            'en' => 'Unknown Error',
            'retry' => false
        );


        return $result;
    }
}
